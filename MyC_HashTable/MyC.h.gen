// Auto-generate begin. Do not modify!
#ifndef H_MyC
#define H_MyC

#include <stdlib.h>

#define new(typename)           typename##_Constructor(malloc(sizeof(typename)))
#define new1(typename,a1)       typename##_Constructor1(malloc(sizeof(typename)),a1)
#define new2(typename,a1,a2)    typename##_Constructor2(malloc(sizeof(typename)),a1,a2)
#define new3(typename,a1,a2,a3) typename##_Constructor3(malloc(sizeof(typename)),a1,a2,a3)

#define delete(typename,self) free(typename##_Destructor(self))

// Result related definitions
typedef struct Result
{
    int code;
}
Result;

typedef void* ref;

#define Result(T) Result##T
#define TypedefResult(T) \
typedef struct [[nodiscard]] Result(T) \
{ \
	int code; \
	T value; \
} \
Result(T)

TypedefResult(ref);

enum ResultCode
{
    InvalidArgument = -3,
    AllocNull = -2,
	OutOfBounds = -1,
	OK = 0
};

#define _MyC_CONCAT(a, b) a##b
#define CONCAT(a, b) _MyC_CONCAT(a, b)
#define UNIQUE_NAME(base) CONCAT(base, __COUNTER__)

#define setup(T) Result(T) _MyC_try_return_value

#define try(T, x, statement) _MyC_try(T, statement, UNIQUE_NAME(temp_result), x)
#define	_MyC_try(T, statement, result, x) \
	Result(T) result = statement; \
	if (result.code != 0) \
	{ \
		_MyC_try_return_value.code = result.code; \
		return _MyC_try_return_value; \
	} \
	T x = result.value

#define run(statement) _MyC_run(statement, UNIQUE_NAME(temp_code))
#define _MyC_run(statement, temp) \
	int temp = statement.code; \
	if (temp != 0) \
        return _MyC_try_return_value.code = temp, _MyC_try_return_value
    
#define OK(x) \
    _MyC_try_return_value.code = OK, \
    _MyC_try_return_value.value = x, \
    _MyC_try_return_value

#define ok \
    _MyC_try_return_value.code = OK, \
    _MyC_try_return_value

#endif
// Auto-generate end. Do not modify!